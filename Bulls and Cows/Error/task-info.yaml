type: edu
custom_name: Error!
files:
- name: src/bullscows/Main.java
  visible: true
  text: "package bullscows;\n\npublic class Main {\n    public static void main(String[]\
    \ args) {\n        System.out.println(\"The secret code is prepared: ****.\\n\"\
    ); \n        \n        System.out.println(\"Turn 1. Answer:\"); \n        System.out.println(\"\
    1234\"); \n        System.out.println(\"Grade: None\\n\"); \n        \n      \
    \  System.out.println(\"Turn 2. Answer:\"); \n        System.out.println(\"9876\"\
    ); \n        System.out.println(\"Grade: 4 bulls.\");\n        \n        System.out.println(\"\
    Congrats! The secret code 9876\");\n    }\n}\n"
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output;
            int gotAnswer = 0;
            main.execute("1");
            main.execute("10");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check of results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one. ");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("4");
            String output = main.execute("10");
            secretCheck(output, 4, 10);

            Character[] usedSymbols = getUsedSymbols(main, 4);
            boolean check = getPermutations(main, 4, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 4 and 10 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("6");
            String output = main.execute("10");
            secretCheck(output, 6, 10);

            Character[] usedSymbols = getUsedSymbols(main, 6);
            boolean check = getPermutations(main, 6, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 6 and 10 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // length limit check
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11");
            output = main.execute("10");

            if (output.toLowerCase().contains("error")) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("The testing system waited for a error message " +
                        "(the message should contain a word \"error\").");
            }
        }

        // this stage test
        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("4");
            String output = main.execute("16");
            secretCheck(output, 4, 16);

            Character[] usedSymbols = getUsedSymbols(main, 4);
            boolean check = getPermutations(main, 4, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 4 and 16 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // test of usage of full dictionary
        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();

            main.execute("6");
            String output = main.execute("36");
            secretCheck(output, 6, 36);

            Character[] usedSymbols = getUsedSymbols(main, 6);
            boolean check = getPermutations(main, 6, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 6 and 36 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // tested incorrect word's length
        @DynamicTestingMethod
        CheckResult test7() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("0");

            if (!main.isFinished()) {
                output = main.execute("1");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program continued work after an incorrect input.");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong("The testing system waited for a error message " +
                        "(the message should contain a word \"error\").");
            }

            return CheckResult.correct();
        }

        // the dictionary is less than word's length
        @DynamicTestingMethod
        CheckResult test8() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("10");
            main.execute("9");

            if (!main.isFinished()) {
                return CheckResult.wrong("The program continued work after an incorrect input.");
            }

            return CheckResult.correct();
        }

        // test of dictionary's limit
        @DynamicTestingMethod
        CheckResult test9() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output;
            main.execute("9");
            output = main.execute("37");

            if (!main.isFinished()) {
                return CheckResult.wrong("The program continued work after an incorrect input.");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong("The testing system waited for a error message " +
                        "(the message should contain a word \"error\").");
            }

            return CheckResult.correct();
        }

        // test of words input
        @DynamicTestingMethod
        CheckResult test10() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output;
            output = main.execute("abcdefg 1 -6");

            if (!main.isFinished()) {
                return CheckResult.wrong("The program continued work after an incorrect input.");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong("The testing system waited for a error message " +
                        "(the message should contain a word \"error\").");
            }

            return CheckResult.correct();
        }


        void secretCheck(String output, int length, int dictLen) {
            String secret = new String(new char[length]).replace('\0', '*');
            output = output.toLowerCase();

            if (!output.contains(secret)) {
                throw new WrongAnswer("The length of secret code is incorrect.");
            }

            String firstChar = "0";
            String lastChar;
            if (dictLen <= 10) {
                lastChar = "" + ((char) (47 + dictLen));
            } else {
                lastChar = "" + ((char) (86 + dictLen));
            }

            if (!(output.contains(firstChar) && output.contains(lastChar))) {
                throw new WrongAnswer("The range of possible symbols " +
                        "in the secret code is incorrect. " +
                        "For the " + dictLen + " possible symbols " +
                        "the last symbol should be '" + lastChar + "'.");
            }
        }


        Character[] getUsedSymbols(TestedProgram main, int length) {
            Character[] symbols = new Character[length];
            char[] dictionary = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                    'u', 'v', 'w', 'x', 'y', 'z'};
            int[] result;

            int index = 0;
            String input;
            String output;

            for (char c : dictionary) {
                input = new String(new char[length]).replace('\0', c);
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    symbols[index++] = c;
                }

                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                        "Output should contain " + length + " bulls " +
                        "summarized as every option was tried. Found: " + index
                );
            }

            return symbols;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Character[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ow").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ull").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                        "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }

        private static void swap(Character[] input, int a, int b) {
            char tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }
    }
  learner_created: false
- name: src/bullscows/BullsCows.java
  visible: true
  text: "package bullscows;\n\nimport java.util.*;\n\npublic class BullsCows {\n\t\
    private static Random random;\n\tprivate static final ArrayList<Character> secretCodeList\
    \ = new ArrayList<>();\n\tprivate static int rangeOfCharacters;\n\n\tprivate BullsCows()\
    \ {}\n\n\tpublic static void StartGame() {\n\t\tSecretCodeLimit();\n\n\t\tStringBuilder\
    \ secretCode;\n\t\tString stringSecretCodeLength = input(\"Please, enter the secret\
    \ code's length:\");\n\t\tString stringRangeOfCharacters = input(\"Input the number\
    \ of possible symbols in the code:\");\n\n\t\tint secretCodeLength = 0;\n\t\t\
    try {\n\t\t\tsecretCodeLength = Integer.parseInt(stringSecretCodeLength);\n\t\t\
    \trangeOfCharacters = Integer.parseInt(stringRangeOfCharacters) - 1;\n\t\t} catch\
    \ (NumberFormatException nfe) {\n\t\t\tSystem.out.println(\"Error\");\n\t\t}\n\
    \n\t\tsecretCode = generateCode(secretCodeLength);\n\t\tprintMessage(secretCodeLength);\n\
    \n\t\tif (secretCode != null) {\n\t\t\tSystem.out.println(\"Okay, let's start\
    \ a game!\");\n\n\t\t\tint cowCounter;\n\t\t\tint bullCounter;\n\t\t\tint turn\
    \ = 1;\n\n\t\t\tdo {\n\t\t\t\tcowCounter = 0;\n\t\t\t\tbullCounter = 0;\n\n\t\t\
    \t\tString inputCode = input(\"Turn \" + turn + \":\");\n\t\t\t\tHashSet<Integer>\
    \ secretCodeDuplicates = groupDuplicates(inputCode);\n\n\t\t\t\tif (inputCode.length()\
    \ == secretCode.length()) {\n\t\t\t\t\tif (Objects.equals(secretCode, inputCode))\
    \ {\n\t\t\t\t\t\tbullCounter = inputCode.length();\n\t\t\t\t\t} else {\n\t\t\t\
    \t\t\tfor (int i = 0; i < inputCode.length(); i++) {\n\t\t\t\t\t\t\tif (!verifyDuplicates(secretCodeDuplicates,\
    \ secretCode, i)) {\n\t\t\t\t\t\t\t\tif (inputCode.charAt(i) == secretCode.charAt(i))\
    \ {\n\t\t\t\t\t\t\t\t\tbullCounter++;\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\
    \t\t\t}\n\n\t\t\t\t\t\t\t\tfor (int j = 0; j < secretCode.length(); j++) {\n\t\
    \t\t\t\t\t\t\t\tif (inputCode.charAt(i) == secretCode.charAt(j)) {\n\t\t\t\t\t\
    \t\t\t\t\tif (verifyDuplicates(secretCodeDuplicates, secretCode, j)) {\n\t\t\t\
    \t\t\t\t\t\t\t\tbullCounter++;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\
    \t\t\tcowCounter++;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\
    \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tStringBuilder message\
    \ = new StringBuilder(\"Grade: \");\n\t\t\t\t\tStringBuilder bull = new StringBuilder(\"\
    bulls\");\n\t\t\t\t\tStringBuilder cow = new StringBuilder(\"cows\");\n\n\t\t\t\
    \t\tif (cowCounter == 0 && bullCounter == 0) {\n\t\t\t\t\t\tmessage.append(\"\
    None\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (bullCounter == 1) {\n\t\t\t\t\t\t\
    \tbull.deleteCharAt(4);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cowCounter == 1) {\n\t\
    \t\t\t\t\t\tcow.deleteCharAt(3);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmessage.append(String.format(\"\
    %d %s and %d %s\", bullCounter, bull, cowCounter, cow));\n\t\t\t\t\t}\n\n\t\t\t\
    \t\tif (bullCounter == inputCode.length()) {\n\t\t\t\t\t\tSystem.out.println(\"\
    Grade: \" + inputCode.length() + \" bulls\");\n\t\t\t\t\t\tSystem.out.println(\"\
    Congratulations! You guessed the secret code.\");\n\t\t\t\t\t} else {\n\t\t\t\t\
    \t\tSystem.out.println(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tturn++;\n\t\t\
    \t} while (bullCounter != secretCode.length());\n\t\t}\n\t}\n\n\tprivate static\
    \ void SecretCodeLimit() {\n\t\tchar ch = '0';\n\t\tfor (; ch <= '9'; ch++) {\n\
    \t\t\tsecretCodeList.add(ch);\n\t\t}\n\n\t\tfor (ch = 'a'; ch <= 'z'; ch++) {\n\
    \t\t\tsecretCodeList.add(ch);\n\t\t}\n\t}\n\n\tpublic static String input(String\
    \ message) {\n\t\tScanner scanner = new Scanner(System.in);\n\n\t\tSystem.out.println(message);\n\
    \t\treturn scanner.nextLine();\n\t}\n\n\tprivate static StringBuilder generateCode(int\
    \ number) {\n\t\tif (0 >= number || number > 9) {\n\t\t\tSystem.out.printf(\"\
    Error: can't generate a secret number with length of %d because there aren't enough\
    \ unique digits\", number);\n\t\t\treturn null;\n\t\t}\n\n\t\trandom = new Random();\n\
    \n\t\tList<Character> uniqueCodeList = new ArrayList<>();\n\t\tStringBuilder uniqueCode\
    \ = new StringBuilder();\n\n\t\tuniqueCodeList.add(randomNumber());\n\t\tfor (int\
    \ i = 1; i < number; i++) {\n\t\t\tchar code = randomNumber();\n\t\t\twhile (uniqueCodeList.contains(code)){\n\
    \t\t\t\tcode = randomNumber();\n\t\t\t}\n\n\t\t\tuniqueCodeList.add(code);\n\t\
    \t}\n\n\t\tfor (Character character: uniqueCodeList) {\n\t\t\tuniqueCode.append(character);\n\
    \t\t}\n\t\treturn uniqueCode;\n\t}\n\n\tprivate static void printMessage(int secretCodeLength)\
    \ {\n\n\t\tSystem.out.print(\"The secret is prepared: \");\n\t\tfor (int i = 0;\
    \ i < secretCodeLength; i++) {\n\t\t\tSystem.out.print(\"*\");\n\t\t}\n\t\tSystem.out.print(\"\
    \ (\");\n\t\tif (rangeOfCharacters < 10) {\n\t\t\tSystem.out.print(\"0-\" + secretCodeList.get(rangeOfCharacters));\n\
    \t\t} else if (rangeOfCharacters < 37) {\n\t\t\tif (rangeOfCharacters == 10) {\n\
    \t\t\t\tSystem.out.print(\"0-9, a\");\n\t\t\t} else {\n\t\t\t\tSystem.out.print(\"\
    0-9, a-\" + secretCodeList.get(rangeOfCharacters));\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(\"\
    ).\");\n\t\tSystem.out.println();\n\t}\n\n\tprivate static Character randomNumber()\
    \ {\n\t\treturn secretCodeList.get(random.nextInt(rangeOfCharacters));\n\t}\n\n\
    \tprivate static HashSet<Integer> groupDuplicates(String inputCode) {\n\t\tHashSet<Integer>\
    \ secretCodeDuplicates = new HashSet<>();\n\n\t\tfor (int i = 0; i < inputCode.length();\
    \ i++) {\n\t\t\tfor (int j = i + 1; j < inputCode.length(); j++) {\n\t\t\t\tif\
    \ (inputCode.charAt(i) == inputCode.charAt(j)) {\n\t\t\t\t\tsecretCodeDuplicates.add(j);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn secretCodeDuplicates;\n\t}\n\n\tprivate\
    \ static boolean verifyDuplicates(HashSet<Integer> duplicates, StringBuilder secretCode,\
    \ int n) {\n\t\treturn duplicates.contains(secretCode.indexOf(String.valueOf(secretCode.charAt(n))));\n\
    \t}\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5435#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 12 Jun 2023 02:11:21 UTC"
record: -1
